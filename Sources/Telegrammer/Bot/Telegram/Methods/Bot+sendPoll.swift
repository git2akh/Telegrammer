// Telegrammer - Telegram Bot Swift SDK.
// This file is autogenerated by API/generate_wrappers.rb script.

public extension Bot {

    /// Parameters container struct for `sendPoll` method
    struct SendPollParams: JSONEncodable {

        /// Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        var chatId: ChatId

        /// Poll question, 1-300 characters
        var question: String

        /// A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
        var options: [String]

        /// True, if the poll needs to be anonymous, defaults to True
        var isAnonymous: Bool?

        /// Poll type, “quiz” or “regular”, defaults to “regular”
        var type: String?

        /// True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to False
        var allowsMultipleAnswers: Bool?

        /// 0-based identifier of the correct answer option, required for polls in quiz mode
        var correctOptionId: Int?

        /// Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
        var explanation: String?

        /// Mode for parsing entities in the explanation. See formatting options for more details.
        var explanationParseMode: ParseMode?

        /// A JSON-serialized list of special entities that appear in the poll explanation, which can be specified instead of parse_mode
        var explanationEntities: [MessageEntity]?

        /// Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close_date.
        var openPeriod: Int?

        /// Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with open_period.
        var closeDate: Int?

        /// Pass True, if the poll needs to be immediately closed. This can be useful for poll preview.
        var isClosed: Bool?

        /// Sends the message silently. Users will receive a notification with no sound.
        var disableNotification: Bool?

        /// Protects the contents of the sent message from forwarding and saving
        var protectContent: Bool?

        /// If the message is a reply, ID of the original message
        var replyToMessageId: Int?

        /// Pass True, if the message should be sent even if the specified replied-to message is not found
        var allowSendingWithoutReply: Bool?

        /// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        var replyMarkup: ReplyMarkup?

        /// Custom keys for coding/decoding `SendPollParams` struct
        enum CodingKeys: String, CodingKey {
            case chatId = "chat_id"
            case question = "question"
            case options = "options"
            case isAnonymous = "is_anonymous"
            case type = "type"
            case allowsMultipleAnswers = "allows_multiple_answers"
            case correctOptionId = "correct_option_id"
            case explanation = "explanation"
            case explanationParseMode = "explanation_parse_mode"
            case explanationEntities = "explanation_entities"
            case openPeriod = "open_period"
            case closeDate = "close_date"
            case isClosed = "is_closed"
            case disableNotification = "disable_notification"
            case protectContent = "protect_content"
            case replyToMessageId = "reply_to_message_id"
            case allowSendingWithoutReply = "allow_sending_without_reply"
            case replyMarkup = "reply_markup"
        }

        public init(chatId: ChatId, question: String, options: [String], isAnonymous: Bool? = nil, type: String? = nil, allowsMultipleAnswers: Bool? = nil, correctOptionId: Int? = nil, explanation: String? = nil, explanationParseMode: ParseMode? = nil, explanationEntities: [MessageEntity]? = nil, openPeriod: Int? = nil, closeDate: Int? = nil, isClosed: Bool? = nil, disableNotification: Bool? = nil, protectContent: Bool? = nil, replyToMessageId: Int? = nil, allowSendingWithoutReply: Bool? = nil, replyMarkup: ReplyMarkup? = nil) {
            self.chatId = chatId
            self.question = question
            self.options = options
            self.isAnonymous = isAnonymous
            self.type = type
            self.allowsMultipleAnswers = allowsMultipleAnswers
            self.correctOptionId = correctOptionId
            self.explanation = explanation
            self.explanationParseMode = explanationParseMode
            self.explanationEntities = explanationEntities
            self.openPeriod = openPeriod
            self.closeDate = closeDate
            self.isClosed = isClosed
            self.disableNotification = disableNotification
            self.protectContent = protectContent
            self.replyToMessageId = replyToMessageId
            self.allowSendingWithoutReply = allowSendingWithoutReply
            self.replyMarkup = replyMarkup
        }
    }

    /**
     Use this method to send a native poll. On success, the sent Message is returned.

     SeeAlso Telegram Bot API Reference:
     [SendPollParams](https://core.telegram.org/bots/api#sendpoll)
     
     - Parameters:
         - params: Parameters container, see `SendPollParams` struct
     - Throws: Throws on errors
     - Returns: Future of `Message` type
     */
    @discardableResult
    func sendPoll(params: SendPollParams) throws -> Future<Message> {
        let body = try httpBody(for: params)
        let headers = httpHeaders(for: params)
        return try client
            .request(endpoint: "sendPoll", body: body, headers: headers)
            .flatMapThrowing { (container) -> Message in
                return try self.processContainer(container)
        }
    }
}

// MARK: Concurrency Support
#if compiler(>=5.5)
@available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
public extension Bot {

    /**
     Use this method to send a native poll. On success, the sent Message is returned.

     SeeAlso Telegram Bot API Reference:
     [SendPollParams](https://core.telegram.org/bots/api#sendpoll)
     
     - Parameters:
         - params: Parameters container, see `SendPollParams` struct
     - Throws: Throws on errors
     - Returns: Future of `Message` type
     */
    @discardableResult
    func sendPoll(params: SendPollParams) async throws -> Message {
        let body = try httpBody(for: params)
        let headers = httpHeaders(for: params)
        return try self.processContainer(try await client.request(endpoint: "sendPoll", body: body, headers: headers))
    }
}
#endif
