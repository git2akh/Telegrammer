// Telegrammer - Telegram Bot Swift SDK.
// This file is autogenerated by API/generate_wrappers.rb script.

public extension Bot {

    /// Parameters container struct for `copyMessage` method
    struct CopyMessageParams: JSONEncodable {

        /// Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        var chatId: ChatId

        /// Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)
        var fromChatId: ChatId

        /// Message identifier in the chat specified in from_chat_id
        var messageId: Int

        /// New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
        var caption: String?

        /// Mode for parsing entities in the new caption. See formatting options for more details.
        var parseMode: ParseMode?

        /// A JSON-serialized list of special entities that appear in the new caption, which can be specified instead of parse_mode
        var captionEntities: [MessageEntity]?

        /// Sends the message silently. Users will receive a notification with no sound.
        var disableNotification: Bool?

        /// Protects the contents of the sent message from forwarding and saving
        var protectContent: Bool?

        /// If the message is a reply, ID of the original message
        var replyToMessageId: Int?

        /// Pass True, if the message should be sent even if the specified replied-to message is not found
        var allowSendingWithoutReply: Bool?

        /// Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
        var replyMarkup: ReplyMarkup?

        /// Custom keys for coding/decoding `CopyMessageParams` struct
        enum CodingKeys: String, CodingKey {
            case chatId = "chat_id"
            case fromChatId = "from_chat_id"
            case messageId = "message_id"
            case caption = "caption"
            case parseMode = "parse_mode"
            case captionEntities = "caption_entities"
            case disableNotification = "disable_notification"
            case protectContent = "protect_content"
            case replyToMessageId = "reply_to_message_id"
            case allowSendingWithoutReply = "allow_sending_without_reply"
            case replyMarkup = "reply_markup"
        }

        public init(chatId: ChatId, fromChatId: ChatId, messageId: Int, caption: String? = nil, parseMode: ParseMode? = nil, captionEntities: [MessageEntity]? = nil, disableNotification: Bool? = nil, protectContent: Bool? = nil, replyToMessageId: Int? = nil, allowSendingWithoutReply: Bool? = nil, replyMarkup: ReplyMarkup? = nil) {
            self.chatId = chatId
            self.fromChatId = fromChatId
            self.messageId = messageId
            self.caption = caption
            self.parseMode = parseMode
            self.captionEntities = captionEntities
            self.disableNotification = disableNotification
            self.protectContent = protectContent
            self.replyToMessageId = replyToMessageId
            self.allowSendingWithoutReply = allowSendingWithoutReply
            self.replyMarkup = replyMarkup
        }
    }

    /**
     Use this method to copy messages of any kind. Service messages and invoice messages can't be copied. The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success.

     SeeAlso Telegram Bot API Reference:
     [CopyMessageParams](https://core.telegram.org/bots/api#copymessage)
     
     - Parameters:
         - params: Parameters container, see `CopyMessageParams` struct
     - Throws: Throws on errors
     - Returns: Future of `MessageId` type
     */
    @discardableResult
    func copyMessage(params: CopyMessageParams) throws -> Future<MessageId> {
        let body = try httpBody(for: params)
        let headers = httpHeaders(for: params)
        return try client
            .request(endpoint: "copyMessage", body: body, headers: headers)
            .flatMapThrowing { (container) -> MessageId in
                return try self.processContainer(container)
        }
    }
}

// MARK: Concurrency Support
#if compiler(>=5.5)
@available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
public extension Bot {

    /**
     Use this method to copy messages of any kind. Service messages and invoice messages can't be copied. The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success.

     SeeAlso Telegram Bot API Reference:
     [CopyMessageParams](https://core.telegram.org/bots/api#copymessage)
     
     - Parameters:
         - params: Parameters container, see `CopyMessageParams` struct
     - Throws: Throws on errors
     - Returns: Future of `MessageId` type
     */
    @discardableResult
    func copyMessage(params: CopyMessageParams) async throws -> MessageId {
        let body = try httpBody(for: params)
        let headers = httpHeaders(for: params)
        return try self.processContainer(try await client.request(endpoint: "copyMessage", body: body, headers: headers))
    }
}
#endif
